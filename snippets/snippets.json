{
    "BML: json (create object)": {
        "prefix": "bml-json",
        "category": "JSON Functions",
        "body": [
            "// Create from JSON string",
            "jsonObj = json(\"{\\\"key\\\":\\\"value\\\"}\");",
            "// Create an empty json object",
            "jsonObj = json();"
        ],
        "description": "Create a JSON object from a JSON formatted string (or empty if omitted).",
        "signature": "Json json([String jsonFormatStr])",
        "functionName": "json"
    },
    "BML: isjsonnull": {
        "prefix": "bml-isjsonnull",
        "category": "JSON Functions",
        "body": [
            "// Check if a JSON key is null",
            "isNull = isjsonnull(jsonObj, \"key\");",
            "// Check if an array index is null",
            "isNull = isjsonnull(jsonArr, 0);"
        ],
        "description": "Checks for null values in a JSON object or JSON array. Returns boolean.",
        "signature": "Boolean isjsonnull(Json jsonIdentifier, String key (or JsonArray jsonArrayIdentifier, Integer index))",
        "functionName": "isjsonnull"
    },
    "BML: jsonget": {
        "prefix": "bml-jsonget",
        "category": "JSON Functions",
        "body": [
            "// Get value with default",
            "val = jsonget(jsonObj, \"key\", \"string\", \"defaultValue\");"
        ],
        "description": "Retrieve a value from a JSON object for the given key. Optional valueType and defaultValue.",
        "signature": "<ValueType> jsonget(Json jsonIdentifier, String key [, String valueType [, <ValueType> defaultValue]])",
        "functionName": "jsonget"
    },
    "BML: jsonput": {
        "prefix": "bml-jsonput",
        "category": "JSON Functions",
        "body": [
            "// Put or update a key in a JSON object",
            "jsonput(jsonObj, \"key\", value);"
        ],
        "description": "Adds or updates a key-value entry in a JSON object. Returns the inserted/updated value.",
        "signature": "<ValueType> jsonput(Json jsonIdentifier, String key, <ValueType> value)",
        "functionName": "jsonput"
    },
    "BML: jsonremove": {
        "prefix": "bml-jsonremove",
        "category": "JSON Functions",
        "body": [
            "// Remove first-level key from JSON object",
            "isRemoved = jsonremove(jsonObj, \"key\");"
        ],
        "description": "Removes a first-level key-value entry from a JSON object. Returns boolean.",
        "signature": "Boolean jsonremove(Json jsonIdentifier, String key)",
        "functionName": "jsonremove"
    },
    "BML: jsoncopy": {
        "prefix": "bml-jsoncopy",
        "category": "JSON Functions",
        "body": [
            "// Copy a JSON object",
            "copyObj = jsoncopy(jsonObj);"
        ],
        "description": "Creates a copy of a JSON object. Changes to the original will not affect the copy.",
        "signature": "Json jsoncopy(Json jsonIdentifier)",
        "functionName": "jsoncopy"
    },
    "BML: jsontostr": {
        "prefix": "bml-jsontostr",
        "category": "JSON Functions",
        "body": [
            "// Convert JSON object to JSON-formatted string",
            "jsonStr = jsontostr(jsonObj);"
        ],
        "description": "Converts a JSON object into a JSON formatted string.",
        "signature": "String jsontostr(Json jsonIdentifier)",
        "functionName": "jsontostr"
    },
    "BML: jsonkeys": {
        "prefix": "bml-jsonkeys",
        "category": "JSON Functions",
        "body": [
            "// Get keys",
            "keys = jsonkeys(jsonObj);"
        ],
        "description": "Retrieves all first-level keys from a JSON object and returns an array of strings. If the optional parameter (ignoreNullValues) is set to true, null value keys are ignored.",
        "signature": "String[] jsonkeys(Json jsonIdentifier [, Boolean ignoreNullValues])",
        "functionName": "jsonkeys"
    },
    "BML: jsonnull": {
        "prefix": "bml-jsonnull",
        "category": "JSON Functions",
        "body": [
            "// Create a JSON null value",
            "jnull = jsonnull();"
        ],
        "description": "Creates an instance of a JSON null object.",
        "signature": "JsonNull jsonnull()",
        "functionName": "jsonnull"
    },
    "BML: jsonarray (create array)": {
        "prefix": "bml-jsonarray",
        "category": "JSON Array Functions",
        "body": [
            "// Create JSON array from string",
            "jsonArr = jsonarray(\"[1,\\\"val1\\\",{\\\"key1\\\":10,\\\"key2\\\":\\\"val2\\\"}]\");",
            "// Create an empty json array",
            "jsonArr = jsonarray();"
        ],
        "description": "Create a JSON array from a JSON-formatted array string, or an empty array if omitted.",
        "signature": "JsonArray jsonarray([String jsonArrStr])",
        "functionName": "jsonarray"
    },
    "BML: jsonarrayappend": {
        "prefix": "bml-jsonarrayappend",
        "category": "JSON Array Functions",
        "body": [
            "// Append a value to end of JSON array",
            "jsonarrayappend(jsonArr, \"value\");"
        ],
        "description": "Appends a value to the end of a JSON array and returns the appended value.",
        "signature": "<ValueType> jsonarrayappend(JsonArray jsonarrayIdentifier, <ValueType> value)",
        "functionName": "jsonarrayappend"
    },
    "BML: jsonarrayget": {
        "prefix": "bml-jsonarrayget",
        "category": "JSON Array Functions",
        "body": [
            "// Get an element from a JSON array",
            "val = jsonarrayget(jsonArr, 0, \"string\");"
        ],
        "description": "Returns the value from a JSON array at a given index. Optional valueType.",
        "signature": "<ValueType> jsonarrayget(JsonArray jsonArrayIdentifier, Integer index [, String valueType])",
        "functionName": "jsonarrayget"
    },
    "BML: jsonarraysize": {
        "prefix": "bml-jsonarraysize",
        "category": "JSON Array Functions",
        "body": [
            "// Get size of JSON array",
            "size = jsonarraysize(jsonArr);"
        ],
        "description": "Returns the size (number of elements) of a JSON array.",
        "signature": "Integer jsonarraysize(JsonArray jsonarrayIdentifier)",
        "functionName": "jsonarraysize"
    },
    "BML: jsonarrayremove": {
        "prefix": "bml-jsonarrayremove",
        "category": "JSON Array Functions",
        "body": [
            "// Remove an element from array by index",
            "jsonarrayremove(jsonArr, 0);"
        ],
        "description": "Removes an element from a JSON array. The size of the array object after the object is removed is returned. An error is thrown if the given index is not available.",
        "signature": "Integer jsonarrayremove(JsonArray jsonArrayIdentifier, Integer index)",
        "functionName": "jsonarrayremove"
    },
    "BML: jsonarraycopy": {
        "prefix": "bml-jsonarraycopy",
        "category": "JSON Array Functions",
        "body": [
            "// Make a copy of a JSON array",
            "copyJsonArr = jsonarraycopy(jsonArr);"
        ],
        "description": "Creates a copy of a JSON array.",
        "signature": "JsonArray jsonarraycopy(JsonArray jsonArrayIdentifier)",
        "functionName": "jsonarraycopy"
    },
    "BML: jsonarraytostr": {
        "prefix": "bml-jsonarraytostr",
        "category": "JSON Array Functions",
        "body": [
            "// Convert JSON array to string",
            "jsonArrStr = jsonarraytostr(jsonArr);"
        ],
        "description": "Converts a JSON array into a JSON formatted string.",
        "signature": "String jsonarraytostr(JsonArray jsonArrayIdentifier)",
        "functionName": "jsonarraytostr"
    },
    "BML: jsonarrayrefid": {
        "prefix": "bml-jsonarrayrefid",
        "category": "JSON Array Functions",
        "body": [
            "// Get a unique reference id for JSON array",
            "refId = jsonarrayrefid(jsonArr);"
        ],
        "description": "Returns a unique reference ID that represents the input JSON array. Can only be invoked by Commerce advanced modify, auto update or advanced default functions. This function provides a more efficient method to pass a JSON array to the BML output to update an array set.",
        "signature": "String jsonarrayrefid(JsonArray jsonArrayIdentifier)",
        "functionName": "jsonarrayrefid"
    },
    "BML: jsonpathgetmultiple": {
        "prefix": "bml-jsonpathgetmultiple",
        "category": "JSON Functions",
        "body": [
            "// Get multiple values matching jsonPath",
            "arr = jsonpathgetmultiple(jsonObj, \"$.path\");",
            "// Example:",
            "// str = \"{\\\"key1\\\":90,\\\"key2\\\":[{\\\"key1\\\":900}],\\\"key3\\\":{\\\"key1\\\":9000}}\";",
            "// jsonObj = json(str);",
            "// arrayVals = jsonpathgetmultiple(jsonObj,\"$..key1\");",
            "// print arrayVals; //Output: [90,900,9000]"
        ],
        "description": "Retrieve multiple values or nodes for a JSONPath expression. asPath=false returns values, true returns nodes.",
        "signature": "JsonArray jsonpathgetmultiple(Json jsonIdentifier, String jsonPath [, Boolean asPath])",
        "functionName": "jsonpathgetmultiple"
    },
    "BML: jsonpathgetsingle": {
        "prefix": "bml-jsonpathgetsingle",
        "category": "JSON Functions",
        "body": [
            "// Get single value for jsonPath",
            "val = jsonpathgetsingle(jsonObj, \"$.path\");",
            "// Example:",
            "// str = \"{\\\"store\\\":{\\\"book\\\":[{\\\"category\\\":\\\"reference\\\",\\\"author\\\":\\\"Nigel Rees\\\"},{\\\"category\\\":\\\"fiction\\\",\\\"author\\\":\\\"Evelyn Waugh\\\"}]},\\\"expensive\\\":10}\";",
            "// jsonObj = json(str);",
            "// ",
            "// catArray = jsonpathgetsingle(jsonObj,\"$.store.book[0]\");",
            "// print catArray; // Output: {\"category\":\"reference\",\"author\":\"Nigel Rees\"}",
            "// ",
            "// expenseInt = jsonpathgetsingle(jsonObj,\"$.expensive\",\"integer\");",
            "// print expenseInt; // Output: 10"
        ],
        "description": "Retrieves the first node or value corresponding to a JSONPath expression. The valueType and defaultValue parameters are optional.",
        "signature": "<ValueType> jsonpathgetsingle(Json jsonIdentifier, String jsonPath [, String valueType [, <ValueType> defaultValue]])",
        "functionName": "jsonpathgetsingle"
    },
    "BML: jsonpathset": {
        "prefix": "bml-jsonpathset",
        "category": "JSON Functions",
        "body": [
            "// Set/update all nodes matching jsonPath to a new value",
            "jsonpathset(jsonObj, \"$.path\", newValue);"
        ],
        "description": "Updates all nodes matched by a JSONPath expression and returns the nodes updated.",
        "signature": "String[] jsonpathset(Json jsonIdentifier, String jsonPath, <ValueType> value)",
        "functionName": "jsonpathset"
    },
    "BML: jsonpathcheck": {
        "prefix": "bml-jsonpathcheck",
        "category": "JSON Functions",
        "body": [
            "// Check whether a JSONPath exists in the JSON object",
            "found = jsonpathcheck(jsonObj, \"$.path\");"
        ],
        "description": "Checks if a JSONPath exists in a JSON object; returns boolean.",
        "signature": "Boolean jsonpathcheck(Json jsonIdentifier, String jsonPath)",
        "functionName": "jsonpathcheck"
    },
    "BML: jsonpathremove": {
        "prefix": "bml-jsonpathremove",
        "category": "JSON Functions",
        "body": [
            "// Remove nodes matching jsonPath",
            "removed = jsonpathremove(jsonObj, \"$.path\");"
        ],
        "description": "Removes nodes matching a JSONPath expression from the JSON object; returns boolean.",
        "signature": "Boolean jsonpathremove(Json jsonIdentifier, string jsonPath)",
        "functionName": "jsonpathremove"
    },
    "BML: len": {
        "prefix": "bml-len",
        "category": "String Functions",
        "body": [
            "// Get length of a string",
            "strLength = len(myString);"
        ],
        "description": "Returns the number of characters in the string.",
        "signature": "len(str)",
        "functionName": "len"
    },
    "BML: string": {
        "prefix": "bml-string",
        "category": "String Functions",
        "body": [
            "str = string(variable);"
        ],
        "description": "Converts a float, integer or boolean value into text.",
        "signature": "string(float(integer(boolean)))",
        "functionName": "string"
    },
    "BML: substring": {
        "prefix": "bml-substring",
        "category": "String Functions",
        "body": [
            "subStr = substring(myString, start, end);"
        ],
        "description": "Extracts a substring from the given string.",
        "signature": "substring(str, start, [end])",
        "functionName": "substring"
    },
    "BML: startswith": {
        "prefix": "bml-startswith",
        "category": "String Functions",
        "body": [
            "starts = startswith(myString, \"subString\");"
        ],
        "description": "Checks whether a string starts with a particular substring.",
        "signature": "startswith(str, substring)",
        "functionName": "startswith"
    },
    "BML: endswith": {
        "prefix": "bml-endswith",
        "category": "String Functions",
        "body": [
            "ends = endswith(myString, \"subString\");"
        ],
        "description": "Checks whether a string ends with a particular substring.",
        "signature": "endswith(str, substring)",
        "functionName": "endswith"
    },
    "BML: lower": {
        "prefix": "bml-lower",
        "category": "String Functions",
        "body": [
            "lowerStr = lower(myString);"
        ],
        "description": "converts all characters in the text into all lowercase letters.",
        "signature": "lower(str)",
        "functionName": "lower"
    },
    "BML: upper": {
        "prefix": "bml-upper",
        "category": "String Functions",
        "body": [
            "upperStr = upper(myString);"
        ],
        "description": "converts all characters in the text into all uppercase letters.",
        "signature": "upper(str)",
        "functionName": "upper"
    },
    "BML: trim": {
        "prefix": "bml-trim",
        "category": "String Functions",
        "body": [
            "trimmed = trim(myString);"
        ],
        "description": "Remove whitespace from strings.",
        "signature": "trim(str)",
        "functionName": "trim"
    },
    "BML: replace": {
        "prefix": "bml-replace",
        "category": "String Functions",
        "body": [
            "result = replace(myString, \"old\", \"new\");"
        ],
        "description": "Replace substrings inside a string.",
        "signature": "replace(str, old, new, [n])",
        "functionName": "replace"
    },
    "BML: split": {
        "prefix": "bml-split",
        "category": "String Functions",
        "body": [
            "arr = split(myString, ",
            ");"
        ],
        "description": "Split a string into an array by delimiter.",
        "signature": "String[] split(str, separator)",
        "functionName": "split"
    },
    "BML: join": {
        "prefix": "bml-join",
        "category": "String Functions",
        "body": [
            "output = join(myArray, ",
            ");"
        ],
        "description": "Join an array of strings into a single string.",
        "signature": "join(String[] str_array, String delimiter)",
        "functionName": "join"
    },
    "BML: formatascurrency": {
        "prefix": "bml-formatascurrency",
        "category": "String Functions",
        "body": [
            "formatted = formatascurrency(value, \"currencyCode\");"
        ],
        "description": "Takes a number and returns it as a formatted currency string.",
        "signature": "formatascurrency(x, [currencyCode])",
        "functionName": "formatascurrency"
    },
    "BML: atoi": {
        "prefix": "bml-atoi",
        "category": "String Functions",
        "body": [
            "result = atoi(myString);"
        ],
        "description": "Converts text that represents a number into an integer value.",
        "signature": "atoi(str)",
        "functionName": "atoi"
    },
    "BML: atof": {
        "prefix": "bml-atof",
        "category": "String Functions",
        "body": [
            "result = atof(myString);"
        ],
        "description": "Converts text that represents a number into a float value.",
        "signature": "atof(str)",
        "functionName": "atof"
    },
    "BML: isnumber": {
        "prefix": "bml-isnumber",
        "category": "String Functions",
        "body": [
            "isnumber(myString);"
        ],
        "description": "Returns true when the string is a number and false if it contains other characters.",
        "signature": "isnumber(str)",
        "functionName": "isnumber"
    },
    "BML: find": {
        "prefix": "bml-find",
        "category": "String Functions",
        "body": [
            "find(myString,\"substring\")"
        ],
        "description": "Returns the position of a substring within a string.",
        "signature": "find(str, substring, [start], [end])",
        "functionName": "find"
    },
    "BML: decodebase64": {
        "prefix": "bml-decodebase64",
        "category": "String Functions",
        "body": [
            "result = decodebase64(myString);"
        ],
        "description": "Takes an encoded Base64 string and returns it as a plain text string.",
        "signature": "decodebase64(str)",
        "functionName": "decodebase64"
    },
    "BML: encodebase64": {
        "prefix": "bml-encodebase64",
        "category": "String Functions",
        "body": [
            "userName = \"\";",
            "password = \"\";",
            "result = encodebase64(userName + \":\" + password);"
        ],
        "description": "Parses the string parameter and converts it into its Base64 equivalent, as an encoded string.",
        "signature": "encodebase64(str)",
        "functionName": "encodebase64"
    },
    "BML: getcurrencyvalue": {
        "prefix": "bml-getcurrencyvalue",
        "category": "String Functions",
        "body": [
            "result = getcurrencyvalue(value, \"currencyCode\");"
        ],
        "description": "Takes a formatted currency string and returns the string's numeric value.",
        "signature": "getcurrencyvalue(value, [currencyCode])",
        "functionName": "getcurrencyvalue"
    },
    "BML: html": {
        "prefix": "bml-html",
        "category": "String Functions",
        "body": [
            "result = html(myString);"
        ],
        "description": "A method for HTML escaping (output encoding) of a string as safe plain text.",
        "signature": "String html(String str)",
        "functionName": "html"
    },
    "BML: containskey (dictionary)": {
        "prefix": "bml-dict-containskey",
        "category": "Dictionary Functions",
        "body": [
            "containskey(myDictionary, \"key\");"
        ],
        "description": "Returns true if the specified key exists in the dictionary.",
        "signature": "containskey(dictIdentifier, key)",
        "functionName": "containskey"
    },
    "BML: dict (create dictionary)": {
        "prefix": "bml-dict",
        "category": "Dictionary Functions",
        "body": [
            "// Create a dictionary",
            "myDictionary = dict(\"string\");"
        ],
        "description": "Create a dictionary for the specified data type.",
        "signature": "dict(dictType)",
        "functionName": "dict"
    },
    "BML: get (dictionary)": {
        "prefix": "bml-dict-get",
        "category": "Dictionary Functions",
        "body": [
            "value = get(myDictionary, \"key\");"
        ],
        "description": "Get the value stored in the dictionary for the given key.",
        "signature": "get(dictIdentifier, key)",
        "functionName": "get"
    },
    "BML: keys (dictionary)": {
        "prefix": "bml-dict-keys",
        "category": "Dictionary Functions",
        "body": [
            "keysArr = keys(myDictionary);"
        ],
        "description": "Retrieve an unordered string array of all keys in a dictionary.",
        "signature": "keys(Dictionary dictionaryIdentifier)",
        "functionName": "keys"
    },
    "BML: put (dictionary)": {
        "prefix": "bml-dict-put",
        "category": "Dictionary Functions",
        "body": [
            "put(myDictionary, \"key\", value);"
        ],
        "description": "Insert or update a value in the dictionary under the given key.",
        "signature": "put(dictIdentifier, key, value)",
        "functionName": "put"
    },
    "BML: values (dictionary)": {
        "prefix": "bml-dict-values",
        "category": "Dictionary Functions",
        "body": [
            "vals = values(myDictionary);"
        ],
        "description": "Get an array of all values stored in the dictionary.",
        "signature": "values(Dictionary dictionaryIdentifier)",
        "functionName": "values"
    },
    "BML: adddays": {
        "prefix": "bml-date-adddays",
        "category": "Date Functions",
        "body": [
            "newDate = adddays(date, noOfDays);"
        ],
        "description": "Adds days to a date.",
        "signature": "adddays(date, noOfDays)",
        "functionName": "adddays"
    },
    "BML: addmonths": {
        "prefix": "bml-date-addmonths",
        "category": "Date Functions",
        "body": [
            "newDate = addmonths(date, noOfMonths);"
        ],
        "description": "Adds months to a date.",
        "signature": "Date addmonths (Date date, Integer num_of_months)",
        "functionName": "addmonths"
    },
    "BML: comparedates": {
        "prefix": "bml-date-comparedates",
        "category": "Date Functions",
        "body": [
            "result = comparedates(date1, date2);"
        ],
        "description": "Compare two dates based on date and time.",
        "signature": "comparedates(Date date1, Date date2)",
        "functionName": "comparedates"
    },
    "BML: datetostr": {
        "prefix": "bml-date-datetostr",
        "category": "Date Functions",
        "body": [
            "result = datetostr(date, dateFormat);"
        ],
        "description": "Converts a date to a string.",
        "signature": "datetostr(Date date,[String dateFormat, [String timeZone]])",
        "functionName": "datetostr"
    },
    "BML: getcurrenttimeinmillis": {
        "prefix": "bml-date-getcurrenttimeinmillis",
        "category": "Date Functions",
        "body": [
            "result = getcurrenttimeinmillis();"
        ],
        "description": "Returns the current time in milliseconds.",
        "signature": "Integer getcurrenttimeinmillis()",
        "functionName": "getcurrenttimeinmillis"
    },
    "BML: getdate": {
        "prefix": "bml-date-getdate",
        "category": "Date Functions",
        "body": [
            "currentDate = getdate();"
        ],
        "description": "Returns the current date.",
        "signature": "Integer getcurrenttimeinmillis()",
        "functionName": "getdate"
    },
    "BML: getdiffindays": {
        "prefix": "bml-date-getdiffindays",
        "category": "Date Functions",
        "body": [
            "result = getdiffindays(date1, date2);"
        ],
        "description": "Calculates the number of days between two different dates.",
        "signature": "Integer getcurrenttimeinmillis()",
        "functionName": "getdiffindays"
    },
    "BML: getstrdate": {
        "prefix": "bml-date-getstrdate",
        "category": "Date Functions",
        "body": [
            "result = getstrdate();"
        ],
        "description": "Returns the string representation of current date.",
        "signature": "String getstrdate()",
        "functionName": "getstrdate"
    },
    "BML: isleap": {
        "prefix": "bml-date-isleap",
        "category": "Date Functions",
        "body": [
            "result = isleap(Year);"
        ],
        "description": "Returns true if the year provided is a leap year.",
        "signature": "isleap(year_num)",
        "functionName": "isleap"
    },
    "BML: isweekend": {
        "prefix": "bml-date-isweekend",
        "category": "Date Functions",
        "body": [
            "result = isweekend(date);"
        ],
        "description": "Returns true if the date provided is a Saturday or Sunday.",
        "signature": "isweekend(date)",
        "functionName": "isweekend"
    },
    "BML: minusdays": {
        "prefix": "bml-date-minusdays",
        "category": "Date Functions",
        "body": [
            "newDate = minusdays(date, noOfDays);"
        ],
        "description": "Subtracts days to a date.",
        "signature": "minusdays(date, noOfDays)",
        "functionName": "minusdays"
    },
    "BML: strtojavadate": {
        "prefix": "bml-date-strtojavadate",
        "category": "Date Functions",
        "body": [
            "result = strtojavadate(dateString, dateFormat);"
        ],
        "description": "Converts a string to a date.",
        "signature": "strtojavadate(String str, String format, [String timeZone])",
        "functionName": "strtojavadate"
    },
    "BML makeurlparam": {
        "prefix": "bml-makeurlparam",
        "category": "URL Functions",
        "body": [
            "params = makeurlparam({",
            "    'param1' : \"value\",",
            "});"
        ],
        "description": "Converts a series of name-value pairs into a query string, which can be appended to a URL.",
        "signature": "String makeurlparam( {String 'name1' : String \"value1\", [String 'name2' : String \"value2\", ...]})",
        "functionName": "makeurlparam"
    },
    "BML urldata (GET)": {
        "prefix": "bml-urldata-get",
        "category": "URL Functions",
        "body": [
            "headerDict = dict(\"string\");",
            "put(headerDict, \"Accept\", \"application/json\");",
            "put(headerDict, \"Content-Type\", \"application/json\");",
            "put(headerDict, \"Authorization\", credentials);",
            "response = urldata(url, \"GET\", headerDict);"
        ],
        "description": "Retrieves data using GET method",
        "signature": "urldata(String url, String httpMethod, [Dictionary headers], [String body], [Integer timeout]);",
        "functionName": "urldata-GET"
    },
    "BML urldata (POST)": {
        "prefix": "bml-urldata-post",
        "category": "URL Functions",
        "body": [
            "headerDict = dict(\"string\");",
            "put(headerDict, \"Accept\", \"application/json\");",
            "put(headerDict, \"Content-Type\", \"application/json\");",
            "put(headerDict, \"Authorization\", credentials);",
            "response = urldata(url, \"POST\", headerDict, requestPayload);"
        ],
        "description": "Retrieves data using POST method",
        "signature": "urldata(String url, String httpMethod, [Dictionary headers], [String body], [Integer timeout])",
        "functionName": "urldata-POST"
    },
    "BML urldatabypost": {
        "prefix": "bml-urldatabypost",
        "category": "URL Functions",
        "body": [
            "headerDict = dict(\"string\");",
            "put(headerDict, \"Accept\", \"application/json\");",
            "put(headerDict, \"Content-Type\", \"application/json\");",
            "put(headerDict, \"Authorization\", credentials);",
            "response = urldatabypost(url, requestPayload, \"ERROR\", headerDict);"
        ],
        "description": "Retrieves data using POST method",
        "signature": "String urldatabypost(String url, String parameters, String defaultValue, [Integer timeout]]])",
        "functionName": "urldatabypost"
    },
    "BML urldatabyget": {
        "prefix": "bml-urldatabyget",
        "category": "URL Functions",
        "body": [
            "response = urldatabyget(url, params, \"ERROR\");"
        ],
        "description": "Retrieves data using GET method",
        "signature": "String urldatabyget(String url, String parameters, String defaultValue,[Integer timeout])",
        "functionName": "urldatabyget"
    },
    "BML urldatabypostasync": {
        "prefix": "bml-urldatabypostasync",
        "category": "URL Functions",
        "body": [
            "headerDict = dict(\"string\");",
            "response = urldatabypostasync(url, params, \"ERROR\", \"callbackActionVarName\", headerDict);"
        ],
        "description": "Retrieves data asynchronously using POST method",
        "signature": "String urldatabypostasync(String url, String parameters, String defaultValue, String callbackActionVarName, [Dictionary headers, [Boolean returnErrorResponse,[Integer timeout]]])",
        "functionName": "urldatabypostasync"
    },
    "BML applytemplate": {
        "prefix": "bml-applytemplate",
        "category": "XML Functions",
        "body": [
            "payload = dict(\"string\");",
            "applytemplate(templateFileLocation, payload);"
        ],
        "description": "This function applies a set of token key-value pairs to the template file.",
        "signature": "String applytemplate(String templateFileLocation [, Dictionary payload [, String defaultErrorMessage [, Json jsonIdentifier]]])",
        "functionName": "applytemplate"
    },
    "BML readxmlmultiple": {
        "prefix": "bml-readxmlmultiple",
        "category": "XML Functions",
        "body": [
            "result = readxmlmultiple(xmlPayload, xpaths);"
        ],
        "description": "This function reads a set of multiple XML node contents based on a set of XPath expressions.",
        "signature": "readxmlmultiple(String xmlPayload, String[] xpaths [, String defaultErrorMessage])",
        "functionName": "readxmlmultiple"
    },
    "BML readxmlsingle": {
        "prefix": "bml-readxmlsingle",
        "category": "XML Functions",
        "body": [
            "result = readxmlsingle(xmlPayload, xpaths);"
        ],
        "description": "This function reads a set of single XML node content based on a set of XPath expressions.",
        "signature": "readxmlsingle(String xmlPayload, String[] xpaths [, String defaultErrorMessage])",
        "functionName": "readxmlsingle"
    },
    "BML transformxml": {
        "prefix": "bml-transformxml",
        "category": "XML Functions",
        "body": [
            "result = transformxml(xmlcontent, xslFileLocation);"
        ],
        "description": "This function transforms an XML string with an XSLT file stored in the File Manager.",
        "signature": "transformxml(String xml, String xslFileLocation [, String defaultErrorMessage])",
        "functionName": "transformxml"
    },
    "BML append": {
        "prefix": "bml-array-append",
        "category": "Array Functions",
        "body": [
            "append(arr, \"value\");"
        ],
        "description": "This function will attach a new element to the end of an array.",
        "signature": "append(array arr, value)",
        "functionName": "append"
    },
    "BML boolean[n]": {
        "prefix": "bml-array-boolean1d",
        "category": "Array Functions",
        "body": [
            "booleanArray = boolean[size];"
        ],
        "description": "Declare a 1-D boolean array with the specified size.",
        "signature": "Boolean[] boolean[Integer n]",
        "functionName": "boolean[n]"
    },
    "BML boolean[n][n]": {
        "prefix": "bml-array-boolean2d",
        "category": "Array Functions",
        "body": [
            "booleanArray = boolean[size1][size2];"
        ],
        "description": "Declare a 2-D boolean array with the specified size.",
        "signature": "Boolean[][] boolean[Integer n][Integer n]",
        "functionName": "boolean[n][n]"
    },
    "BML bytearray": {
        "prefix": "bml-array-bytearray",
        "category": "Array Functions",
        "body": [
            "value = bytearray(content, \"charSet\");"
        ],
        "description": "This function stores a collection of binary data such as the contents of a file.",
        "signature": "ByteArray bytearray(String content [, String charset])",
        "functionName": "bytearray"
    },
    "BML date[n]": {
        "prefix": "bml-array-date1d",
        "category": "Array Functions",
        "body": [
            "datesArray = date[size];"
        ],
        "description": "Declare a 1-D date array with the specified size.",
        "signature": "Date[] date[Integer n]",
        "functionName": "date[n]"
    },
    "BML date[n][n]": {
        "prefix": "bml-array-date2d",
        "category": "Array Functions",
        "body": [
            "datesArray = date[size1][size2];"
        ],
        "description": "Declare a 2-D date array with the specified size.",
        "signature": "Date[][] date[Integer n][Integer n]",
        "functionName": "date[n][n]"
    },
    "BML findinarray": {
        "prefix": "bml-array-findinarray",
        "category": "Array Functions",
        "body": [
            "findinarray(arr, \"value\")"
        ],
        "description": "Find index of a value in an array",
        "signature": "findinarray(array arr, value)",
        "functionName": "findinarray"
    },
    "BML float[n]": {
        "prefix": "bml-array-float1d",
        "category": "Array Functions",
        "body": [
            "floatArray = float[size];"
        ],
        "description": "Declare a 1-D float array with the specified size.",
        "signature": "Float[] float[Integer n]",
        "functionName": "float[n]"
    },
    "BML float[n][n]": {
        "prefix": "bml-array-float2d",
        "category": "Array Functions",
        "body": [
            "floatArray = float[size1][size2];"
        ],
        "description": "Declare a 2-D float array with the specified size.",
        "signature": "Float[] float[Integer n]",
        "functionName": "float[n][n]"
    },
    "BML integer[n]": {
        "prefix": "bml-array-integer1d",
        "category": "Array Functions",
        "body": [
            "integerArray = integer[size];"
        ],
        "description": "Declare a 1-D integer array with the specified size.",
        "signature": "Integer[] integer[Integer n]",
        "functionName": "integer[n]"
    },
    "BML integer[n][n]": {
        "prefix": "bml-array-integer2d",
        "category": "Array Functions",
        "body": [
            "integerArray = integer[size1][size2];"
        ],
        "description": "Declare a 2-D integer array with the specified size.",
        "signature": "Integer[][] integer[Integer n][Integer n]",
        "functionName": "integer[n][n]"
    },
    "BML isempty": {
        "prefix": "bml-array-isempty",
        "category": "Array Functions",
        "body": [
            "result = isempty(arr);"
        ],
        "description": "Check whether an array is empty",
        "signature": "isempty(array arr)",
        "functionName": "isempty"
    },
    "BML max": {
        "prefix": "bml-array-max",
        "category": "Array Functions",
        "body": [
            "maxValue = max(arr);"
        ],
        "description": "Return maximum value in array",
        "signature": "max(array arr)",
        "functionName": "max"
    },
    "BML min": {
        "prefix": "bml-array-min",
        "category": "Array Functions",
        "body": [
            "minValue = min(arr);"
        ],
        "description": "Return minimum value in array",
        "signature": "min(array arr)",
        "functionName": "min"
    },
    "BML range": {
        "prefix": "bml-array-range",
        "category": "Array Functions",
        "body": [
            "arr = range(size);"
        ],
        "description": "Declares an integer array with a specified size and initializes it to its index value.",
        "signature": "range(size)",
        "functionName": "range"
    },
    "BML remove": {
        "prefix": "bml-array-remove",
        "category": "Array Functions",
        "body": [
            "index = remove(arr, position);"
        ],
        "description": "Remove element from array by index",
        "signature": "remove(array arr, integer position)",
        "functionName": "remove"
    },
    "BML reverse": {
        "prefix": "bml-array-reverse",
        "category": "Array Functions",
        "body": [
            "result = reverse(arr);"
        ],
        "description": "Reverse the array in place",
        "signature": "reverse(array arr)",
        "functionName": "reverse"
    },
    "BML sizeofarray": {
        "prefix": "bml-array-sizeofarray",
        "category": "Array Functions",
        "body": [
            "arraySize = sizeofarray(arr);"
        ],
        "description": "Return number of elements in array",
        "signature": "sizeofarray(array arr)",
        "functionName": "sizeofarray"
    },
    "BML sort": {
        "prefix": "bml-array-sort",
        "category": "Array Functions",
        "body": [
            "sortedArray = sort(arr, \"order\");"
        ],
        "description": "This function sorts array elements based on defined sort method. You can sort in ascending or descending order.",
        "signature": "sort(arrayID, [sortOrder], [sortType])",
        "functionName": "sort"
    },
    "BML string[n]": {
        "prefix": "bml-array-string1d",
        "category": "Array Functions",
        "body": [
            "stringArray = string[size];"
        ],
        "description": "Declare a 1-D string array",
        "signature": "String[] string[Integer n]",
        "functionName": "string[n]"
    },
    "BML string[n][n]": {
        "prefix": "bml-array-string2d",
        "category": "Array Functions",
        "body": [
            "stringArray = string[size1][size2];"
        ],
        "description": "Declare a 2-D string array with the specified size.",
        "signature": "String[][] string[Integer n][Integer n]",
        "functionName": "string[n][n]"
    },
    "BML acos": {
        "prefix": "bml-math-acos",
        "category": "Math Functions",
        "body": [
            "result = acos(value);"
        ],
        "description": "This function returns the arc cosine of the number or angle in the range of 0 through π.",
        "signature": "acos(value)",
        "functionName": "acos"
    },
    "BML asin": {
        "prefix": "bml-math-asin",
        "category": "Math Functions",
        "body": [
            "result = asin(value);"
        ],
        "description": "This function returns the arcsine of a number or angle.",
        "signature": "asin(value)",
        "functionName": "asin"
    },
    "BML atan": {
        "prefix": "bml-math-atan",
        "category": "Math Functions",
        "body": [
            "result = atan(value);"
        ],
        "description": "This function returns the arctangent of the number or angle.",
        "signature": "atan(value)",
        "functionName": "atan"
    },
    "BML ceil": {
        "prefix": "bml-math-ceil",
        "category": "Math Functions",
        "body": [
            "result = ceil(value);"
        ],
        "description": "This function converts a float into the next highest whole number.",
        "signature": "ceil(value)",
        "functionName": "ceil"
    },
    "BML cos": {
        "prefix": "bml-math-cos",
        "category": "Math Functions",
        "body": [
            "result = cos(value);"
        ],
        "description": "This function returns the cosine of the number/angle.",
        "signature": "cos(value)",
        "functionName": "cos"
    },
    "BML cosh": {
        "prefix": "bml-math-cosh",
        "category": "Math Functions",
        "body": [
            "result = cosh(value);"
        ],
        "description": "This function returns the hyperbolic cosine of a number or angle.",
        "signature": "cosh(value)",
        "functionName": "cosh"
    },
    "BML exp": {
        "prefix": "bml-math-exp",
        "category": "Math Functions",
        "body": [
            "result = exp(value);"
        ],
        "description": "This function returns Euler's number e raised to the power of the number passed through the function, also known as the exponential function.",
        "signature": "exp(value)",
        "functionName": "exp"
    },
    "BML fabs": {
        "prefix": "bml-math-fabs",
        "category": "Math Functions",
        "body": [
            "result = fabs(value);"
        ],
        "description": "This function returns the absolute value of a number.",
        "signature": "fabs(value)",
        "functionName": "fabs"
    },
    "BML fmod": {
        "prefix": "bml-math-fmod",
        "category": "Math Functions",
        "body": [
            "result = fmod(value1, value2);"
        ],
        "description": "This function returns the remainder of the division operation x, y.",
        "signature": "fmod(value1, value2)",
        "functionName": "fmod"
    },
    "BML hypot": {
        "prefix": "bml-math-hypot",
        "category": "Math Functions",
        "body": [
            "result = hypot(value1, value2);"
        ],
        "description": "This function returns the sqrt(x2 + y2) without intermediaries.",
        "signature": "hypot(value1, value2)",
        "functionName": "hypot"
    },
    "BML integer": {
        "prefix": "bml-math-integer",
        "category": "Math Functions",
        "body": [
            "result = integer(value);"
        ],
        "description": "This function returns the integer portion of a float number.",
        "signature": "integer(value)",
        "functionName": "integer"
    },
    "BML ln": {
        "prefix": "bml-math-ln",
        "category": "Math Functions",
        "body": [
            "result = ln(value);"
        ],
        "description": "This function returns the natural logarithm (base e) of the number.",
        "signature": "ln(value)",
        "functionName": "ln"
    },
    "BML log": {
        "prefix": "bml-math-log",
        "category": "Math Functions",
        "body": [
            "result = log(value);"
        ],
        "description": "This function returns the base-10 logarithm of the number.",
        "signature": "log(value)",
        "functionName": "log"
    },
    "BML pow": {
        "prefix": "bml-math-pow",
        "category": "Math Functions",
        "body": [
            "result = pow(base, exponent);"
        ],
        "description": "This function returns the value of the first argument raised to the power of the second argument.",
        "signature": "pow(base, exponent)",
        "functionName": "pow"
    },
    "BML round": {
        "prefix": "bml-math-round",
        "category": "Math Functions",
        "body": [
            "result = round(value);"
        ],
        "description": "This function returns the rounded value of a number up to a certain decimal point.",
        "signature": "round(value)",
        "functionName": "round"
    },
    "BML sin": {
        "prefix": "bml-math-sin",
        "category": "Math Functions",
        "body": [
            "result = sin(value);"
        ],
        "description": "This function returns the trigonometric sine of the number/angle.",
        "signature": "sin(value)",
        "functionName": "sin"
    },
    "BML sinh": {
        "prefix": "bml-math-sinh",
        "category": "Math Functions",
        "body": [
            "result = sinh(value);"
        ],
        "description": "This function returns the hyperbolic sine of a number or angle.",
        "signature": "sinh(value)",
        "functionName": "sinh"
    },
    "BML sqrt": {
        "prefix": "bml-math-sqrt",
        "category": "Math Functions",
        "body": [
            "result = sqrt(value);"
        ],
        "description": "This function returns the positive square root of a number.",
        "signature": "sqrt(value)",
        "functionName": "sqrt"
    },
    "BML tan": {
        "prefix": "bml-math-tan",
        "category": "Math Functions",
        "body": [
            "result = tan(value);"
        ],
        "description": "This function returns the tangent of the number/angle.",
        "signature": "tan(value)",
        "functionName": "tan"
    },
    "BML tanh": {
        "prefix": "bml-math-tanh",
        "category": "Math Functions",
        "body": [
            "result = tanh(value);"
        ],
        "description": "This function returns the hyperbolic tangent of a number or angle.",
        "signature": "tanh(value)",
        "functionName": "tanh"
    },
    "BML globaldictset": {
        "prefix": "bml-globaldictset",
        "category": "Global Dictionaries",
        "body": [
            "globaldictset(\"key\", \"value\");"
        ],
        "description": "This function adds or updates the key-value pair in the global dictionary.",
        "signature": "String globaldictset(String key, String value [, Integer minTimeToLive])",
        "functionName": "globaldictset"
    },
    "BML globaldictget": {
        "prefix": "bml-globaldictget",
        "category": "Global Dictionaries",
        "body": [
            "value = globaldictget(\"key\");"
        ],
        "description": "This function returns a value stored in the global dictionary corresponding to the given key. If the key is not found in the global dictionary, null is returned.",
        "signature": "String globaldictget(String key [, Boolean updateTimeToLive])",
        "functionName": "globaldictget"
    },
    "BML globaldictremove": {
        "prefix": "bml-globaldictremove",
        "category": "Global Dictionaries",
        "body": [
            "result = globaldictremove(\"key\");"
        ],
        "description": "The function returns true if the key-value pair is successfully removed, and returns false if the key does not exist in the global dictionary.",
        "signature": "Boolean globaldictremove(String key)",
        "functionName": "globaldictremove"
    },
    "BML getsystemdata": {
        "prefix": "bml-getsystemdata",
        "category": "System Configuration",
        "body": [
            "systemJson = getsystemdata();"
        ],
        "description": "Returns a JSON object containing the entire representation of the System Configuration Data.",
        "signature": "getsystemdata()",
        "functionName": "getsystemdata"
    },
    "BML getsystemattrvalues": {
        "prefix": "bml-getsystemattrvalues",
        "category": "System Configuration",
        "body": [
            "values = getsystemattrvalues(\"$.path\");"
        ],
        "description": "This function returns a string containing a single attribute's values from a System Configuration.",
        "signature": "getsystemattrvalues(String jsonPath)",
        "functionName": "getsystemattrvalues"
    },
    "BML getsystemmultipleattrvalues": {
        "prefix": "bml-getsystemmultipleattrvalues",
        "category": "System Configuration",
        "body": [
            "jsonPaths = dict(\"string\");",
            "values = getsystemmultipleattrvalues(jsonPaths);"
        ],
        "description": "  This function returns dictionary key and value string arrays containing attribute values from a System Configuration.",
        "signature": "getsystemattrvalues(String jsonPath)",
        "functionName": "getsystemmultipleattrvalues"
    },
    "BML usersessionset": {
        "prefix": "bml-usersessionset",
        "category": "User Sessions",
        "body": [
            "usersessionset(\"key\", \"value\");"
        ],
        "description": "This function sets a key-value pair to the user session cache. The values are available as long as the user session is active. Values stored in the session cache are removed automatically when the user logs out, the session expires, or the server is restarted.",
        "signature": "usersessionset(String key, <ValueType> value)",
        "functionName": "usersessionset"
    },
    "BML usersessionget": {
        "prefix": "bml-usersessionget",
        "category": "User Sessions",
        "body": [
            "value = usersessionget(\"key\");"
        ],
        "description": "This function retrieves a value for a given key from a user session. If the key is not found, null is returned.",
        "signature": "<ValueType> usersessionget(String key [, String valueType])",
        "functionName": "usersessionget"
    },
    "BML usersessionremove": {
        "prefix": "bml-usersessionremove",
        "category": "User Sessions",
        "body": [
            "result = usersessionremove(\"key\");"
        ],
        "description": "The function returns true if the key-value pair is successfully removed, and returns false if the key does not exist in the user session.",
        "signature": "Boolean usersessionremove(String key)",
        "functionName": "usersessionremove"
    },
    "BML if": {
        "prefix": "bml-if",
        "category": "Conditional Functions",
        "body": [
            "if (condition) {",
            "\/\/ code",
            "}"
        ],
        "description": "if statement",
        "signature": "...",
        "functionName": "if"
    },
    "BML if.else": {
        "prefix": "bml-if.else",
        "category": "Conditional Functions",
        "body": [
            "if (condition) {",
            "\/\/ code",
            "} else {",
            "\/\/ code",
            "}"
        ],
        "description": "if-else statement",
        "signature": "...",
        "functionName": "if-else"
    },
    "BML if.elif": {
        "prefix": "bml-if.elif",
        "category": "Conditional Functions",
        "body": [
            "if (condition) {",
            "\/\/ code",
            "} elif (condition) {",
            "\/\/ code",
            "}"
        ],
        "description": "if-elif statement",
        "signature": "...",
        "functionName": "if-elif"
    },
    "BML if.elif.else": {
        "prefix": "bml-if.elif.else",
        "category": "Conditional Functions",
        "body": [
            "if (condition) {",
            "\/\/ code",
            "} elif (condition) {",
            "\/\/ code",
            "} else {",
            "\/\/ code",
            "}"
        ],
        "description": "if-elif-else statement",
        "signature": "...",
        "functionName": "if-elif-else"
    },
    "BML loop.array": {
        "prefix": "bml-loop.array",
        "category": "Loops",
        "body": [
            "for each in array {",
            "\/\/ code",
            "}"
        ],
        "description": "Loop an array",
        "signature": "...",
        "functionName": "loopArray"
    },
    "BML: loop.jsonarray": {
        "prefix": "bml-loop.jsonarray",
        "category": "Loops",
        "body": [
            "jsonArrSize = jsonarraysize(jsonArr);",
            "jsonArrRange = range(jsonArrSize);",
            "for index in jsonArrRange {",
            "    val = jsonarrayget(jsonArr, index);",
            "}"
        ],
        "description": "Loop a JSON Array",
        "signature": "...",
        "functionName": "loopJSONArray"
    },
    "BML loop.lineprocess": {
        "prefix": "bml-loop.lineProcess",
        "category": "Loops",
        "body": [
            "for line in line_process {",
            "    parentDocNum = line._parent_doc_number;",
            "    docNum = line._document_number;",
            "",
            "    if (parentDocNum == \"\") {",
            "        // Model logic here",
            "    } else {",
            "        // Line logic here",
            "    }",
            "}"
        ],
        "description": "Loop line process",
        "signature": "...",
        "functionName": "loopLineProcess"
    },
    "BML: header template": {
        "prefix": "bml-header-template",
        "category": "Others",
        "body": [
            "/**",
            "* Name: ",
            "* Date: DD/MM/YYYY",
            "* Purpose: ",
            "* Parameters: ",
            "* Return Format: ",
            "* Sample Test Data: refer to the test script",
            "* Author: ",
            "*",
            "* Rev. Date    |   Developer         | Notes / Comments",
            "* -------------|---------------------|-------------------------------------------------------------------------",
            "*              |                     | ",
            "*/"
        ],
        "description": "Standard header template for BML scripts.",
        "signature": "...",
        "functionName": "headerTemplate"
    },
    "BML: comment block": {
        "prefix": "bml-comment-block",
        "category": "Others",
        "body": [
            "/**",
            "*",
            "*/"
        ],
        "description": "Block comment template.",
        "signature": "...",
        "functionName": "MultiLineComment"
    },
    "BML: single line comment": {
        "prefix": "bml-comment",
        "category": "Others",
        "body": [
            "// "
        ],
        "description": "Single line comment.",
        "signature": "...",
        "functionName": "singleLineComment"
    },
    "BML: print": {
        "prefix": "bml-print",
        "category": "Others",
        "body": [
            "print(variable);"
        ],
        "description": "Print variable",
        "signature": "print(variable)",
        "functionName": "print"
    }
}